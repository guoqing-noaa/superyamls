#!/usr/bin/env python
#
import os
import sys
f_jedivar = "jedivar.yaml"
f_getkf_observer = "getkf_observer.yaml"
f_getkf_solver = "getkf_solver.yaml"
#
with open(f_jedivar, 'r') as infile, open('.observer.yaml', 'w') as outfile:
    observer_zone = False
    for line in infile:
        if "observations:" in line:
            observer_zone = True
        elif observer_zone:
            outfile.write(line)

# getkf_observer.yaml
with open(f_getkf_observer, 'r') as infile, open('.observer.yaml', 'r') as infile2, open('.tmp.yaml', 'w') as outfile:
    for line in infile:
        if "observers:" in line:
            break
        else:
            outfile.write(line)
    # add the observers from jedivar.yaml
    outfile.write(infile2.read())
os.replace('.tmp.yaml', f_getkf_observer)

# getkf_solver.yaml
with open(f_getkf_solver, 'r') as infile, open('.observer.yaml', 'r') as infile2, open('.tmp.yaml', 'w') as outfile:
    for line in infile:
        if "observers:" in line:
            break
        else:
            outfile.write(line)
    # add the solvers from jedivar.yaml
    outfile.write(infile2.read())
os.replace('.tmp.yaml', f_getkf_solver)

# ~~~~~~~~~~~~
# extra processing for solver
#  copy the obsfile line from the obsdatain section to the obsdataout section
#
buffer_zone = []
in_buffer_zone = False
obsfile_line = None
obsdataout = False
with open(f_getkf_solver, 'r') as infile, open(".tmp.solver.yaml", 'w') as outfile:
  for line in infile:
    if "RoundRobin" in line:
      line = line.replace("RoundRobin", "Halo")
    elif "obsdatain" in line:
      in_buffer_zone = True
      buffer_zone.append(line)
    elif in_buffer_zone:
      buffer_zone.append(line)
      if "obsdataout" in line:
        obsdataout=True
      elif "obsfile" in line:
        if obsdataout:
          line = line.replace("jdiag", "data/jdiag/jdiag")
          obsfile_line = line  # Store the obsdataout "obsfile" line

    if obsfile_line and in_buffer_zone:
      # Replace the previous obsfile line with the new one
      for i, buf_line in enumerate(buffer_zone):
          if "obsfile" in buf_line:
              buffer_zone[i] = obsfile_line
              break
      # Write out the buffer zone
      for buf_line in buffer_zone:
          outfile.write(buf_line)
      # Reset buffer and state tracking
      buffer_zone = []
      in_buffer_zone = False
      obsfile_line = None
      obsdataout = False
      continue

    if not in_buffer_zone:
        outfile.write(line)
# ~~~~~~~~
os.replace(".tmp.solver.yaml", f_getkf_solver)
os.remove(".observer.yaml")
